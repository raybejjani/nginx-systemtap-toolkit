#!/usr/bin/env perl

use 5.006001;
use strict;
use warnings;

use Getopt::Std qw( getopts );

my %opts;

getopts("a:dhp:n:c:", \%opts)
    or die usage();

if ($opts{h}) {
    print usage();
    exit;
}

my $pid = $opts{p}
    or die "No nginx process pid specified by the -p option\n";

my $n = $opts{n} || 20;
my $c = $opts{c} || 2;

if ($pid !~ /^\d+$/) {
    die "Bad -p option value \"$pid\": not look like a pid\n";
}

my $stap_args = $opts{a} || '';

if ($^O ne 'linux') {
    die "Only linux is supported but I am on $^O.\n";
}

my $exec_file = "/proc/$pid/exe";
if (!-f $exec_file) {
    die "Nginx process $pid is not running.\n";
}

my $nginx_path = readlink $exec_file;

my $ver = `stap --version 2>&1`;
if (!defined $ver) {
    die "Systemtap not installed or its \"stap\" utility is not visible to the PATH environment: $!\n";
}

if ($ver =~ /version\s+(\d+\.\d+)/i) {
    my $v = $1;
    if ($v < 1.8) {
        die "ERROR: at least systemtap 1.8 is required but found $v\n";
    }

} else {
    die "ERROR: unknown version of systemtap:\n$ver\n";
}

my $stap_src;

my $zone = $opts{n};

my $preamble = <<_EOC_;
probe begin {

    printf("Tracing %d ($nginx_path)...\\n\\n", target())
}
_EOC_
chop $preamble;

$stap_src = <<_EOC_;
$preamble

probe process("$nginx_path").function("ngx_http_file_cache_forced_expire")
{
    if (pid() == target()) {


        cache = \@var("cache")
        if (cache == 0) {
            printf("cache/data pointer is %d. returning early.\\n", cache)
            next
        }
        prefix = user_string_n(\@cast(cache, "ngx_http_file_cache_t")->path->name->data, \@cast(cache, "ngx_http_file_cache_t")->path->name->len)
        printf("Showing cache: %s\\n", prefix)
        printf("%s\\n", \@cast(cache, "ngx_http_file_cache_t")->sh\$\$)
        printf("%s\\n", \@cast(cache, "ngx_http_file_cache_t")->shpool\$\$)

        # sentinel value that indicates the end of the LRU circular list
        sentinel = &\@cast(cache, "ngx_http_file_cache_t")->sh->queue
        printf("sentinel: %s\\n",\@cast(cache, "ngx_http_file_cache_t")->sh->queue\$\$)

        # iterate through the LRU list from the end, up to n times
        num = 0
        for(q = \@cast(cache, "ngx_http_file_cache_t")->sh->queue->prev; num < $n && q != sentinel; q = \@cast(q, "ngx_queue_t")->prev) {
            num++

            # this is equivalent to the ngx_queue_data macro
            offset = &\@cast(0, "ngx_http_file_cache_node_t")->queue
            base = q - offset

            #printf("Node: %s\\n", \@cast(base, "ngx_http_file_cache_node_t")\$\$)

            # construct path/hex/hex/key for this file
            printf("Node: %s/", prefix)
            for (i = 7; i>(7-$c); i--) {
                c = user_uint8(\@cast(base, "ngx_http_file_cache_node_t")->key + i)
                printf("%0.2x/", c)
            }

            nodekey = \@cast(base, "ngx_http_file_cache_node_t")->node->key
            for (i = 0; i < 8; i++) {
                printf("%0.2x", (nodekey>>(8*i) & 0xff))
            }
            for (i = 0; i<8; i++) {
                c = user_uint8(\@cast(base, "ngx_http_file_cache_node_t")->key + i)
                printf("%0.2x", c)
            }
            printf("\\n")

            printf("\\tfs_size=%d\\n\\texists=%d\\n\\tuniq=%d\\n\\tcount=%d\\n\\tuses=%d\\n\\tupdating=%d\\n\\tdeleting=%d\\n\\texpire=%d\\n\\tvalid_sec=%d\\n\\tvalid_msec=%d\\n\\tbody_start=%d\\n\\terror=%d\\n",
                \@cast(base, "ngx_http_file_cache_node_t")->fs_size,
                \@cast(base, "ngx_http_file_cache_node_t")->exists,
                \@cast(base, "ngx_http_file_cache_node_t")->uniq,
                \@cast(base, "ngx_http_file_cache_node_t")->count,
                \@cast(base, "ngx_http_file_cache_node_t")->uses,
                \@cast(base, "ngx_http_file_cache_node_t")->updating,
                \@cast(base, "ngx_http_file_cache_node_t")->deleting,
                \@cast(base, "ngx_http_file_cache_node_t")->expire,
                \@cast(base, "ngx_http_file_cache_node_t")->valid_sec,
                \@cast(base, "ngx_http_file_cache_node_t")->valid_msec,
                \@cast(base, "ngx_http_file_cache_node_t")->body_start,
                \@cast(base, "ngx_http_file_cache_node_t")->error
            )
        } 

        printf("Done. Saw %d nodes.\\n", num)

        exit()
    } /* pid() == target() */
}
_EOC_

if ($opts{d}) {
    print $stap_src;
    exit;
}

open my $in, "|stap $stap_args -x $pid -"
    or die "Cannot run stap: $!\n";

print $in $stap_src;

close $in;

sub usage {
    return <<'_EOC_';
Usage:
    ngx-shm [options]

Options:
    -a <args>           Pass extra arguments to the stap utility.
    -d                  Dump out the systemtap script source.
    -n                  Number of nodes to print. Default of 20.
    -c                  Key prefix depth. e.g. 2 for /08/48/fb4e1fa927d9f2f4c76390eb7f974808. Default 2.
    -h                  Print this usage.
    -p <pid>            Specify the nginx worker process pid.

Examples:
    ngx-shm -p 12345
    ngx-shm -p 12345 -a '-DMAXACTION=100000'
_EOC_
}

sub quote_str {
    my $s = shift;
    $s =~ s/\\/\\\\/g;
    $s =~ s/"/\\"/g;
    $s =~ s/\n/\\n/g;
    $s =~ s/\t/\\t/g;
    $s =~ s/\r/\\r/g;
    return qq{"$s"};
}

